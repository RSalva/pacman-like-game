class Board {
  constructor(ctx) {
    this.ctx = ctx;
    this.x = 0;
    this.y = 0;
    this.w = boardWidth;
    this.h = boardHeight;
    

    // wall --> 0    path --> 1
    this.backgroundTiles = [
    //          0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
    /* 0 */     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    /* 1 */     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    /* 2 */     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    /* 3 */     0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0,
    /* 4 */     0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    /* 5 */     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    /* 6 */     0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    /* 7 */     0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    /* 8 */     0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0,
    /* 9 */     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 10 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 11 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 12 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 0, 3, 3, 0, 0, 0, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 13 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 9, 9, 9, 9, 0, 0, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 14 */    1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 0, 0, 9, 9, 9, 9, 0, 0, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1,
    /* 15 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 9, 9, 9, 9, 0, 0, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 16 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 17 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    /* 18 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    /* 19 */    0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    /* 20 */    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    /* 21 */    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    /* 22 */    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    /* 23 */    0, 2, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 2, 0,
    /* 24 */    0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,
    /* 25 */    0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,
    /* 26 */    0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0,
    /* 27 */    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    /* 28 */    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    /* 29 */    0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    /* 30 */    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
    ];

    this.tileSet = this.setBoardTileSet();
  }

  draw() {
    this.tileSet.forEach((tile) => {
      if (tile !== undefined) {
        tile.draw()
      }
    });    
  }

  setBoardTileSet() {
    const tileSet = [];
    let currentRow = 0;
    for (let i = 0; i < this.backgroundTiles.length; i++) {
      if (i % rows === 0 && i > 27) {
        currentRow++;
      }
      const tileX = (i - ((currentRow) * rows)) * tileSize;
      const tileY = currentRow * tileSize;
      let tile;
      switch(this.backgroundTiles[i]) {          
        case 0:
          tile = new Wall(this.ctx, tileX, tileY, tileSize, tileSize);
          break;
        case 1:
          tile = new Food(this.ctx, tileX + tileSize / 2.5, tileY + tileSize / 2.5, tileSize/4, tileSize/4, false, 10);
          break;
        case 2:
          tile = new Food(this.ctx, tileX + tileSize / 4, tileY + tileSize / 4, tileSize/2, tileSize/2, true, 1000);
          break;
        default:
          break;
      }
      if (tile) {
        tileSet.push(tile);   
      }
    }
    return tileSet;
  }

  
}